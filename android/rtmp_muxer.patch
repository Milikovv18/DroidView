diff --color -ur rtmp/build.gradle rtmp_muxer/build.gradle
--- rtmp/build.gradle	2018-05-18 10:40:20.000000000 +0300
+++ rtmp_muxer/build.gradle	2024-08-25 23:42:47.035976200 +0300
@@ -1,14 +1,13 @@
 apply plugin: 'com.android.library'
 
 android {
-    compileSdkVersion 25
-    buildToolsVersion "25.0.0"
+    compileSdk 34
+
+    namespace "com.octiplex.android.rtmp"
 
     defaultConfig {
-        minSdkVersion 11
-        targetSdkVersion 25
-        versionCode 1
-        versionName "1.0"
+        minSdk 14
+        targetSdk 34
         consumerProguardFile "public-proguard-rules.txt"
     }
     buildTypes {
@@ -20,7 +19,7 @@
 }
 
 dependencies {
-    testCompile 'junit:junit:4.12'
-    compile 'com.android.support:support-annotations:25.0.0'
-    compile 'com.android.support:support-core-utils:25.0.0'
+    testImplementation 'junit:junit:4.12'
+    implementation 'com.android.support:support-annotations:25.0.0'
+    implementation 'com.android.support:support-core-utils:25.0.0'
 }
diff --color -ur rtmp/src/main/java/com/octiplex/android/rtmp/AACAudioFrame.java rtmp_muxer/src/main/java/com/octiplex/android/rtmp/AACAudioFrame.java
--- rtmp/src/main/java/com/octiplex/android/rtmp/AACAudioFrame.java	2018-05-18 10:40:20.000000000 +0300
+++ rtmp_muxer/src/main/java/com/octiplex/android/rtmp/AACAudioFrame.java	2024-08-25 23:40:09.090726800 +0300
@@ -1,6 +1,6 @@
 package com.octiplex.android.rtmp;
 
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 
 /**
  * Interface that defines an AAC audio frame, extracted from {@link android.media.MediaRecorder}.
diff --color -ur rtmp/src/main/java/com/octiplex/android/rtmp/AACAudioHeader.java rtmp_muxer/src/main/java/com/octiplex/android/rtmp/AACAudioHeader.java
--- rtmp/src/main/java/com/octiplex/android/rtmp/AACAudioHeader.java	2018-05-18 10:40:20.000000000 +0300
+++ rtmp_muxer/src/main/java/com/octiplex/android/rtmp/AACAudioHeader.java	2024-08-25 23:40:13.220556900 +0300
@@ -1,6 +1,6 @@
 package com.octiplex.android.rtmp;
 
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 
 /**
  * Interface that defines an AAC header, extracted from {@link android.media.MediaRecorder}.
diff --color -ur rtmp/src/main/java/com/octiplex/android/rtmp/H264VideoFrame.java rtmp_muxer/src/main/java/com/octiplex/android/rtmp/H264VideoFrame.java
--- rtmp/src/main/java/com/octiplex/android/rtmp/H264VideoFrame.java	2018-05-18 10:40:20.000000000 +0300
+++ rtmp_muxer/src/main/java/com/octiplex/android/rtmp/H264VideoFrame.java	2024-08-25 23:40:16.559778700 +0300
@@ -1,6 +1,6 @@
 package com.octiplex.android.rtmp;
 
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 
 /**
  * Interface that defines an H264 video frame, extracted from {@link android.media.MediaCodec}.
diff --color -ur rtmp/src/main/java/com/octiplex/android/rtmp/io/RtmpReader.java rtmp_muxer/src/main/java/com/octiplex/android/rtmp/io/RtmpReader.java
--- rtmp/src/main/java/com/octiplex/android/rtmp/io/RtmpReader.java	2018-05-18 10:40:20.000000000 +0300
+++ rtmp_muxer/src/main/java/com/octiplex/android/rtmp/io/RtmpReader.java	2024-08-31 12:54:05.056475400 +0300
@@ -1,7 +1,9 @@
 package com.octiplex.android.rtmp.io;
 
-import android.support.annotation.NonNull;
-import android.support.annotation.WorkerThread;
+import androidx.annotation.NonNull;
+import androidx.annotation.WorkerThread;
+
+import android.nfc.Tag;
 import android.util.Log;
 
 import com.octiplex.android.rtmp.protocol.Amf0Functions;
@@ -14,6 +16,7 @@
 import java.io.BufferedInputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.util.Arrays;
 import java.util.Map;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -118,6 +121,18 @@
         }
     }
 
+    private static final char[] HEX_ARRAY = "0123456789ABCDEF".toCharArray();
+    public static String bytesToHex(byte[] bytes) {
+        char[] hexChars = new char[bytes.length * 3];
+        for (int j = 0; j < bytes.length; j++) {
+            int v = bytes[j] & 0xFF;
+            hexChars[j * 3] = HEX_ARRAY[v >>> 4];
+            hexChars[j * 3 + 1] = HEX_ARRAY[v & 0x0F];
+            hexChars[j * 3 + 2] = ':';
+        }
+        return new String(hexChars);
+    }
+
     /**
      * Read the next command sent by the server. Will call the appropriate listener if a command
      * is found.<p>
@@ -138,6 +153,9 @@
                 return;
             }
 
+            boolean skipStreamId = (basicHeader & 0b01000000) == 0;
+            basicHeader &= 0b00111111;
+            Log.d(TAG, "Header is " + basicHeader);
             if( basicHeader == 2 || basicHeader == 3 || basicHeader == 5 )
             {
                 if( in.skip(3) != 3 ) // Timestamp
@@ -150,18 +168,23 @@
                 {
                     throw new IOException("Unable to read body size");
                 }
+                Log.d(TAG, "Body size is " + bytesToHex(bodySizeBuffer));
 
                 long bodySize = readNumber(3, 0, bodySizeBuffer);
                 RtmpMessageType type = RtmpMessageType.fromValue(in.read());
+                Log.d(TAG, "Type is " + type.name());
 
-                if( in.skip(4) != 4 ) // Stream ID
-                {
-                    throw new IOException("Unable to read stream ID");
+                if (skipStreamId) {
+                    if (in.skip(4) != 4) // Stream ID
+                    {
+                        throw new IOException("Unable to read stream ID");
+                    }
                 }
 
                 // Check that body message is complete before reading it
                 if( in.available() < bodySize )
                 {
+                    //bodySize = in.available();
                     in.reset();
 
                     // Call next read
@@ -186,11 +209,17 @@
 
                 byte[] buffer = new byte[(int) bodySize];
 
-                if( in.read(buffer) != bodySize )
-                {
+                if (in.read(buffer) != bodySize) {
                     throw new IOException("Unable to read body");
                 }
 
+                Log.d(TAG, "Body is " + bytesToHex(buffer));
+                //if (type == RtmpMessageType.PEER_BANDWIDTH) {
+                //    byte[] array = new byte[in.available()];
+                //    in.read(array);
+                //    Log.d(TAG, "Remaining bytes: " + bytesToHex(array));
+                //}
+
                 parseMessage(type, buffer);
 
                 dataRead += bodySize + 12;
@@ -388,6 +417,7 @@
      */
     private void parseAmf0Function(@NonNull byte[] buffer) throws IOException
     {
+        Log.d(TAG, "Buffer in parseAmf0Function: " + bytesToHex(buffer));
         Amf0Value<String> functionName = Amf0Functions.readString(0, buffer);
 
         switch (functionName.value)
diff --color -ur rtmp/src/main/java/com/octiplex/android/rtmp/io/RtmpWriter.java rtmp_muxer/src/main/java/com/octiplex/android/rtmp/io/RtmpWriter.java
--- rtmp/src/main/java/com/octiplex/android/rtmp/io/RtmpWriter.java	2018-05-18 10:40:20.000000000 +0300
+++ rtmp_muxer/src/main/java/com/octiplex/android/rtmp/io/RtmpWriter.java	2024-09-05 22:55:43.378461800 +0300
@@ -1,7 +1,7 @@
 package com.octiplex.android.rtmp.io;
 
-import android.support.annotation.NonNull;
-import android.support.annotation.WorkerThread;
+import androidx.annotation.NonNull;
+import androidx.annotation.WorkerThread;
 import android.util.Log;
 
 import java.io.IOException;
@@ -140,7 +140,7 @@
     @WorkerThread
     public void send(@NonNull final byte[] data, boolean forceSend) throws IOException
     {
-        waitForAckIfNeeded(forceSend);
+        //waitForAckIfNeeded(forceSend);
 
         totalDataSent += data.length;
         dataSentSinceLastAck += data.length;
@@ -172,7 +172,7 @@
     @WorkerThread
     public void send(@NonNull ByteBuffer buffer, boolean forceSend) throws IOException
     {
-        waitForAckIfNeeded(forceSend);
+        //waitForAckIfNeeded(forceSend);
 
         totalDataSent += buffer.limit();
         dataSentSinceLastAck += buffer.limit();
diff --color -ur rtmp/src/main/java/com/octiplex/android/rtmp/io/ServerException.java rtmp_muxer/src/main/java/com/octiplex/android/rtmp/io/ServerException.java
--- rtmp/src/main/java/com/octiplex/android/rtmp/io/ServerException.java	2018-05-18 10:40:20.000000000 +0300
+++ rtmp_muxer/src/main/java/com/octiplex/android/rtmp/io/ServerException.java	2024-09-01 20:46:39.859482200 +0300
@@ -7,7 +7,7 @@
  *
  * @author Benoit LETONDOR
  */
-final class ServerException extends IOException
+public final class ServerException extends IOException
 {
     public ServerException()
     {
diff --color -ur rtmp/src/main/java/com/octiplex/android/rtmp/io/TimeoutSocket.java rtmp_muxer/src/main/java/com/octiplex/android/rtmp/io/TimeoutSocket.java
--- rtmp/src/main/java/com/octiplex/android/rtmp/io/TimeoutSocket.java	2018-05-18 10:40:20.000000000 +0300
+++ rtmp_muxer/src/main/java/com/octiplex/android/rtmp/io/TimeoutSocket.java	2024-08-25 23:40:39.722459100 +0300
@@ -1,7 +1,7 @@
 package com.octiplex.android.rtmp.io;
 
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 
 import java.io.IOException;
 import java.net.Socket;
diff --color -ur rtmp/src/main/java/com/octiplex/android/rtmp/protocol/Amf0Functions.java rtmp_muxer/src/main/java/com/octiplex/android/rtmp/protocol/Amf0Functions.java
--- rtmp/src/main/java/com/octiplex/android/rtmp/protocol/Amf0Functions.java	2018-05-18 10:40:20.000000000 +0300
+++ rtmp_muxer/src/main/java/com/octiplex/android/rtmp/protocol/Amf0Functions.java	2024-09-01 12:56:12.238473700 +0300
@@ -1,9 +1,10 @@
 package com.octiplex.android.rtmp.protocol;
 
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.annotation.VisibleForTesting;
-import android.support.v4.util.ArrayMap;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.VisibleForTesting;
+
+import android.util.ArrayMap;
 import android.util.Log;
 
 import com.octiplex.android.rtmp.io.RtmpReader;
@@ -290,10 +291,11 @@
         {
             addStringParam(os, "onTextData");
 
-            Map<String, Object> obj = new HashMap<>(1);
-            obj.put("text", value);
+            //Map<String, Object> obj = new HashMap<>(1);
+            //obj.put("text", value);
 
-            Amf0Functions.addMapParam(os, obj);
+            addStringParam(os, value);
+            //Amf0Functions.addMapParam(os, obj);
 
             return os.toByteArray();
         }
@@ -683,7 +685,7 @@
             }
             else
             {
-                throw new IOException("Unable to read data of type: "+type);
+                throw new IOException("Unable to read data of type: "+buffer[offset+length]);
             }
 
             if( isEndOfObject(offset+length, buffer) )
diff --color -ur rtmp/src/main/java/com/octiplex/android/rtmp/protocol/Amf0Value.java rtmp_muxer/src/main/java/com/octiplex/android/rtmp/protocol/Amf0Value.java
--- rtmp/src/main/java/com/octiplex/android/rtmp/protocol/Amf0Value.java	2018-05-18 10:40:20.000000000 +0300
+++ rtmp_muxer/src/main/java/com/octiplex/android/rtmp/protocol/Amf0Value.java	2024-08-25 23:42:06.037848900 +0300
@@ -1,6 +1,6 @@
 package com.octiplex.android.rtmp.protocol;
 
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 
 /**
  * Object that wrap Amf0 value with the size of that value in the buffer
diff --color -ur rtmp/src/main/java/com/octiplex/android/rtmp/protocol/RtmpMessageType.java rtmp_muxer/src/main/java/com/octiplex/android/rtmp/protocol/RtmpMessageType.java
--- rtmp/src/main/java/com/octiplex/android/rtmp/protocol/RtmpMessageType.java	2018-05-18 10:40:20.000000000 +0300
+++ rtmp_muxer/src/main/java/com/octiplex/android/rtmp/protocol/RtmpMessageType.java	2024-08-25 23:40:26.149101800 +0300
@@ -1,7 +1,7 @@
 package com.octiplex.android.rtmp.protocol;
 
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import android.util.Log;
 
 /**
diff --color -ur rtmp/src/main/java/com/octiplex/android/rtmp/protocol/RtmpPeerBandwidthLimitType.java rtmp_muxer/src/main/java/com/octiplex/android/rtmp/protocol/RtmpPeerBandwidthLimitType.java
--- rtmp/src/main/java/com/octiplex/android/rtmp/protocol/RtmpPeerBandwidthLimitType.java	2018-05-18 10:40:20.000000000 +0300
+++ rtmp_muxer/src/main/java/com/octiplex/android/rtmp/protocol/RtmpPeerBandwidthLimitType.java	2024-08-25 23:40:31.446160900 +0300
@@ -1,7 +1,7 @@
 package com.octiplex.android.rtmp.protocol;
 
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import android.util.Log;
 
 /**
diff --color -ur rtmp/src/main/java/com/octiplex/android/rtmp/protocol/RtmpProtocol.java rtmp_muxer/src/main/java/com/octiplex/android/rtmp/protocol/RtmpProtocol.java
--- rtmp/src/main/java/com/octiplex/android/rtmp/protocol/RtmpProtocol.java	2018-05-18 10:40:20.000000000 +0300
+++ rtmp_muxer/src/main/java/com/octiplex/android/rtmp/protocol/RtmpProtocol.java	2024-09-05 23:11:50.157287600 +0300
@@ -1,6 +1,8 @@
 package com.octiplex.android.rtmp.protocol;
 
-import android.support.annotation.NonNull;
+import android.util.Log;
+
+import androidx.annotation.NonNull;
 
 /**
  * RTMP protocol implementation.
@@ -152,6 +154,7 @@
     @NonNull
     public static byte[] generateType2Header(long timestampDelta, int chunkStreamId)
     {
+        Log.d("Header", "generateType2Header");
         byte[] buffer = new byte[4];
 
         addBasicHeader(buffer, 2, chunkStreamId);
@@ -183,6 +186,8 @@
     @NonNull
     public static byte[] generateType3Header(int chunkStreamId)
     {
+        //Log.d("Header", "generateType3Header with " + chunkStreamId);
+
         byte[] buffer = new byte[1];
 
         addBasicHeader(buffer, 3, chunkStreamId);
diff --color -ur rtmp/src/main/java/com/octiplex/android/rtmp/protocol/RtmpUserControlEventType.java rtmp_muxer/src/main/java/com/octiplex/android/rtmp/protocol/RtmpUserControlEventType.java
--- rtmp/src/main/java/com/octiplex/android/rtmp/protocol/RtmpUserControlEventType.java	2018-05-18 10:40:20.000000000 +0300
+++ rtmp_muxer/src/main/java/com/octiplex/android/rtmp/protocol/RtmpUserControlEventType.java	2024-08-25 23:42:13.536877100 +0300
@@ -1,7 +1,7 @@
 package com.octiplex.android.rtmp.protocol;
 
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import android.util.Log;
 
 /**
diff --color -ur rtmp/src/main/java/com/octiplex/android/rtmp/RtmpConnectionListener.java rtmp_muxer/src/main/java/com/octiplex/android/rtmp/RtmpConnectionListener.java
--- rtmp/src/main/java/com/octiplex/android/rtmp/RtmpConnectionListener.java	2018-05-18 10:40:20.000000000 +0300
+++ rtmp_muxer/src/main/java/com/octiplex/android/rtmp/RtmpConnectionListener.java	2024-08-25 23:42:16.396822800 +0300
@@ -1,6 +1,6 @@
 package com.octiplex.android.rtmp;
 
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 
 import java.io.IOException;
 
diff --color -ur rtmp/src/main/java/com/octiplex/android/rtmp/RtmpDataFrame.java rtmp_muxer/src/main/java/com/octiplex/android/rtmp/RtmpDataFrame.java
--- rtmp/src/main/java/com/octiplex/android/rtmp/RtmpDataFrame.java	2018-05-18 10:40:20.000000000 +0300
+++ rtmp_muxer/src/main/java/com/octiplex/android/rtmp/RtmpDataFrame.java	2024-08-25 23:42:19.340841000 +0300
@@ -1,6 +1,6 @@
 package com.octiplex.android.rtmp;
 
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 
 import java.util.HashMap;
 import java.util.Map;
diff --color -ur rtmp/src/main/java/com/octiplex/android/rtmp/RtmpMuxer.java rtmp_muxer/src/main/java/com/octiplex/android/rtmp/RtmpMuxer.java
--- rtmp/src/main/java/com/octiplex/android/rtmp/RtmpMuxer.java	2018-05-18 10:40:20.000000000 +0300
+++ rtmp_muxer/src/main/java/com/octiplex/android/rtmp/RtmpMuxer.java	2024-09-13 23:27:32.352631400 +0300
@@ -2,9 +2,9 @@
 
 import android.os.Looper;
 import android.os.NetworkOnMainThreadException;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.annotation.WorkerThread;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.WorkerThread;
 import android.util.Log;
 
 import com.octiplex.android.rtmp.io.TimeoutSocket;
@@ -22,6 +22,7 @@
 import java.net.SocketAddress;
 import java.nio.ByteBuffer;
 import java.nio.channels.IllegalSelectorException;
+import java.util.Arrays;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 /**
@@ -140,7 +141,7 @@
      * Chunk size used to send data to the server. Initialized to 4096, can be changed by the server
      * calling {@link RtmpReader.RtmpReaderListener#onSetChunkSize(long)}.
      */
-    private int chunkSize = 4096;
+    private int chunkSize = 8192;
     /**
      * Stream ID
      */
@@ -186,6 +187,8 @@
      */
     @Nullable
     private ByteBuffer audioChunkBuffer;
+    @Nullable
+    private ByteBuffer metaChunkBuffer;
     //endregion
 
     //region Timeouts
@@ -568,6 +571,7 @@
     {
         if ( data.isHeader() )
         {
+            Log.d(TAG, "Sending type 0 header");
             sendHeader(data.getData());
             return;
         }
@@ -1030,6 +1034,7 @@
         }
         catch (IOException e)
         {
+            Log.d(TAG, "Inside exception: " + e);
             doStop();
             throw e;
         }
@@ -1096,12 +1101,69 @@
 
         byte[] metaData = Amf0Functions.textMeta(value);
 
-        ByteBuffer buffer = ByteBuffer.allocate(metaData.length+12);
+        int dataLength = metaData.length;
+        int length = chunkSize; // TODO right?
+
+        if (length > dataLength)
+        {
+            length = dataLength;
+        }
+
+        int bufferLength = length+12;
+
+        /*
+         * Send first chunk
+         */
+        final ByteBuffer buffer;
+        if( metaChunkBuffer != null  ) // Try to use the cached buffer
+        {
+            metaChunkBuffer.clear().limit(bufferLength);
+            buffer = metaChunkBuffer;
+        }
+        else
+        {
+            Log.w(TAG, "Using a non cached buffer for first metadata chunk");
+            buffer = ByteBuffer.allocate(bufferLength);
+        }
 
         buffer.put(RtmpProtocol.generateType0Header(META_DATA_STREAM_ID, time.getCurrentTimestamp(), metaData.length, RtmpMessageType.AMF_0_META_DATA, streamId));
-        buffer.put(metaData);
+        buffer.put(metaData, 0, length);
 
-        writer.send(buffer.array());
+        writer.send(buffer);
+
+        int offset = length;
+        while (offset < dataLength)
+        {
+            length = chunkSize;
+            if (offset + length > dataLength)
+            {
+                length = dataLength - offset;
+            }
+
+            int chunkBufferLength = length+1; // Data + type 3 header
+
+            final ByteBuffer chunkBuffer;
+            if( metaChunkBuffer != null ) // Try to use the cached buffer
+            {
+                metaChunkBuffer.clear().limit(chunkBufferLength);
+                chunkBuffer = metaChunkBuffer;
+            }
+            else
+            {
+                Log.w(TAG, "Using a non cached buffer for metadata sub chunk");
+                chunkBuffer = ByteBuffer.allocate(chunkBufferLength);
+            }
+
+            // Write chunk header
+            chunkBuffer.put(RtmpProtocol.generateType3Header(META_DATA_STREAM_ID));
+
+            // Write chunk data
+            chunkBuffer.put(metaData, offset, length);
+
+            writer.send(chunkBuffer, true);
+
+            offset += length;
+        }
     }
 
     /**
@@ -1237,6 +1299,8 @@
      */
     private void doStop()
     {
+        Log.d(TAG, Arrays.toString(Thread.currentThread().getStackTrace()));
+
         try
         {
             this.reader.stop();
@@ -1273,6 +1337,7 @@
         streamId = 0;
         videoChunkBuffer = null;
         audioChunkBuffer = null;
+        metaChunkBuffer = null;
         playpath = null;
     }
 
@@ -1413,6 +1478,16 @@
             // FIXME how to manage concurrency ?
             Log.w(TAG, "Received onSetChunkSize but audioChunkBuffer is already initialized, so keep the size as-is");
         }
+
+        if( metaChunkBuffer == null )
+        {
+            metaChunkBuffer = ByteBuffer.allocate(chunkSize + 12); // 12 for type 0 header
+        }
+        else
+        {
+            // FIXME how to manage concurrency ?
+            Log.w(TAG, "Received onSetChunkSize but metaChunkBuffer is already initialized, so keep the size as-is");
+        }
     }
 
     @Override
